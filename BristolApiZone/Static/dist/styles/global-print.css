@import 'https://fonts.googleapis.com/css?family=Fira+Sans';
html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  padding: 0;
  border: 0;
  margin: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline; }

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section {
  display: block; }

body {
  line-height: 1; }

ol,
ul {
  list-style: none; }

blockquote,
q {
  quotes: none; }
  blockquote:before, blockquote:after,
  q:before,
  q:after {
    content: '';
    content: none; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

body {
  width: 100%; }

/**
 * Simple function to convert pixel values to ems
 * Usage example:
 *   my-selector: em(16px);
 *
 */
/**
 * Simple function to convert a unitless integer to pixels
 * Usage example:
 *   my-selector: px(16);
 *
 */
/**
 * Simple function to remove the unit of measurement
 * Usage example:
 *   strip-unit(16px);
 *
 * @param  {string}   $value  integer with unit of measurement
 * @return {integer}          integer without any unit of measurement
 */
/**
 * Simple function to convert a number to rems
 * Usage example:
 *   calculateRem(32px);
 *
 * @param  {string}   $value  integer with unit of measurement
 * @return {string}          	integer with unit of measurement
 */
html {
  /* Using rems set root size within html */
  /* use optionally to scale */
  /* set to ten for 10:1 ratio */
  font-size: 16px; }

body {
  font-family: "Fira Sans", sans-serif;
  /* For a successful cascade */
  /* set a unitless line height within body */
  line-height: 1.5; }

p + p {
  margin-top: 12px; }

img {
  display: block;
  max-width: 100%;
  height: auto; }

[role="button"] {
  border: 0 none;
  padding: 8px; }

@media print and (color) {
  * {
    -webkit-print-color-adjust: exact;
    print-color-adjust: exact; } }

@media print {
  .wrapper {
    width: 19cm;
    margin: 0 auto; }
  *,
  *:before,
  *:after {
    background: transparent !important;
    color: #000 !important;
    box-shadow: none !important;
    text-shadow: none !important;
    font-family: "Arial"; }
  a,
  a:visited {
    text-decoration: underline; }
  pre,
  blockquote {
    border: 1px solid #999;
    page-break-inside: avoid; }
  thead {
    display: table-header-group; }
  tr,
  img {
    page-break-inside: avoid; }
  img {
    max-width: 100% !important; }
  p,
  h2,
  h3 {
    orphans: 3;
    widows: 3; }
  h2,
  h3 {
    page-break-after: avoid; }
  aside img,
  section img,
  footer img {
    display: none; } }

body, html {
  width: 100%;
  height: 100%;
  padding: 0;
  background: #dc4225; }

/*# sourceMappingURL=data:application/json;base64, */
